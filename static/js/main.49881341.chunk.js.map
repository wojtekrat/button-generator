{"version":3,"sources":["Menu.js","Button.js","Clipboard.js","App.js","index.js"],"names":["StyledMenu","styled","div","MenuNavbar","MenuButton","PickerButton","MenuSidebar","PickerContainer","Menu","props","text","onTextChange","btnFontSize","onFontSizeChange","btnHeight","btnWidth","onHeightChange","onWidthChange","bgColor","setBgColor","borderSize","onBorderSizeChange","borderStyle","onBorderStyleChange","borderColor","setBorderColor","fontColor","setFontColor","borderRadius","setBorderRadius","hoverColor","setHoverColor","hoverBgColor","setHoverBgColor","hoverBorderColor","setHoverBorderColor","url","onUrlChange","btnMargin","setBtnMargin","btnPadding","setBtnPadding","textAlign","onTextAlignChange","transitionTime","onTransitionTimeChange","isURL","onIsURLChange","isHover","onIsHoverChange","isBorder","onIsBorderChange","useState","showBgPicker","setShowBgPicker","showBorderPicker","setShowBorderPicker","showFontColorPicker","setShowFontColorPicker","showHoverColor","setShowHoverColor","showHoverBgColor","setShowHoverBgColor","showHoverBorderColor","setShowHoverBorderColor","isTextSection","setIsTextSection","isSizeSection","setIsSizeSection","isBorderSection","setisBorderSection","isHoverSection","setIsHoverSection","isColorSection","setIsColorSection","onClick","for","id","type","placeholder","autoComplete","maxLength","onChange","value","min","max","checked","e","target","color","updatedColor","hex","StyledButton","a","fontWeigth","prop","Button","href","preventDefault","StyledClipboard","ClipboardMsg","ClipboardSwitch","ClipboardSwitchBtn","ClipboardSection","CopyButton","ClipboardText","Clipboard","isCSS","setIsCSS","isHTML","setIsHTML","isCopied","setIsCopied","onCopyText","setTimeout","clipboardTextHTMLPlain","clipboardButtonCSS","clipboardHoverCss","clipboardAll","onCopy","StyledApp","AppTitle","AppContainer","ButtonContainer","App","setIsURL","setIsHover","setIsBorder","setText","setBtnFontSize","setTextAlign","setUrl","setWidthChange","setHeightChange","setBorderSize","setBorderStyle","setTransitionTime","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49881341.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nconst StyledMenu = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  input {\r\n    width: 300px;\r\n    outline: none;\r\n    border: none;\r\n    margin: 2px;\r\n  }\r\n\r\n  input[type=\"checkbox\"] {\r\n    margin: 5px;\r\n    width: 20px;\r\n  }\r\n\r\n  select {\r\n    width: 300px;\r\n    margin: 2px;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst MenuNavbar = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  background-color: lightblue;\r\n  z-index: 2;\r\n`;\r\n\r\nconst MenuButton = styled.div`\r\n  padding: 5px;\r\n  background-color: lightblue;\r\n  cursor: pointer;\r\n  border-right: 1px solid lightseagreen;\r\n\r\n  &:hover {\r\n    background-color: orange;\r\n  }\r\n`;\r\n\r\nconst PickerButton = styled.div`\r\n  background-color: lightblue;\r\n  width: 310px;\r\n  margin-top: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n\r\n  &:hover {\r\n    background-color: orange;\r\n  }\r\n`;\r\n\r\nconst MenuSidebar = styled.div`\r\n  position: relative;\r\n  padding: 25px;\r\n  top: 12px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: fit-content;\r\n  background-color: aliceblue;\r\n  min-height: fit-content;\r\n  width: 300px;\r\n  border-bottom: 1px solid lightblue;\r\n`;\r\n\r\nconst PickerContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding-top: 15px;\r\n`;\r\n\r\nexport default function Menu(props) {\r\n  const {\r\n    text,\r\n    onTextChange,\r\n    btnFontSize,\r\n    onFontSizeChange,\r\n    btnHeight,\r\n    btnWidth,\r\n    onHeightChange,\r\n    onWidthChange,\r\n    bgColor,\r\n    setBgColor,\r\n    borderSize,\r\n    onBorderSizeChange,\r\n    borderStyle,\r\n    onBorderStyleChange,\r\n    borderColor,\r\n    setBorderColor,\r\n    fontColor,\r\n    setFontColor,\r\n    borderRadius,\r\n    setBorderRadius,\r\n    hoverColor,\r\n    setHoverColor,\r\n    hoverBgColor,\r\n    setHoverBgColor,\r\n    hoverBorderColor,\r\n    setHoverBorderColor,\r\n    url,\r\n    onUrlChange,\r\n    btnMargin,\r\n    setBtnMargin,\r\n    btnPadding,\r\n    setBtnPadding,\r\n    textAlign,\r\n    onTextAlignChange,\r\n    transitionTime,\r\n    onTransitionTimeChange,\r\n    isURL,\r\n    onIsURLChange,\r\n    isHover,\r\n    onIsHoverChange,\r\n    isBorder,\r\n    onIsBorderChange,\r\n  } = props;\r\n  const [showBgPicker, setShowBgPicker] = useState(false);\r\n  const [showBorderPicker, setShowBorderPicker] = useState(false);\r\n  const [showFontColorPicker, setShowFontColorPicker] = useState(false);\r\n  const [showHoverColor, setShowHoverColor] = useState(false);\r\n  const [showHoverBgColor, setShowHoverBgColor] = useState(false);\r\n  const [showHoverBorderColor, setShowHoverBorderColor] = useState(false);\r\n\r\n  const [isTextSection, setIsTextSection] = useState(true);\r\n  const [isSizeSection, setIsSizeSection] = useState(false);\r\n  const [isBorderSection, setisBorderSection] = useState(false);\r\n  const [isHoverSection, setIsHoverSection] = useState(false);\r\n  const [isColorSection, setIsColorSection] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <MenuNavbar>\r\n        <MenuButton\r\n          onClick={() => {\r\n            setIsTextSection(true);\r\n            setIsSizeSection(false);\r\n            setisBorderSection(false);\r\n            setIsHoverSection(false);\r\n            setIsColorSection(false);\r\n          }}\r\n        >\r\n          Text\r\n        </MenuButton>\r\n        <MenuButton\r\n          onClick={() => {\r\n            setIsTextSection(false);\r\n            setIsSizeSection(true);\r\n            setisBorderSection(false);\r\n            setIsHoverSection(false);\r\n            setIsColorSection(false);\r\n          }}\r\n        >\r\n          Size\r\n        </MenuButton>\r\n        <MenuButton\r\n          onClick={() => {\r\n            setIsTextSection(false);\r\n            setIsSizeSection(false);\r\n            setisBorderSection(false);\r\n            setIsHoverSection(false);\r\n            setIsColorSection(true);\r\n          }}\r\n        >\r\n          Color\r\n        </MenuButton>\r\n        <MenuButton\r\n          onClick={() => {\r\n            setIsTextSection(false);\r\n            setIsSizeSection(false);\r\n            setisBorderSection(true);\r\n            setIsHoverSection(false);\r\n            setIsColorSection(false);\r\n          }}\r\n        >\r\n          Border\r\n        </MenuButton>\r\n        <MenuButton\r\n          onClick={() => {\r\n            setIsTextSection(false);\r\n            setIsSizeSection(false);\r\n            setisBorderSection(false);\r\n            setIsHoverSection(true);\r\n            setIsColorSection(false);\r\n          }}\r\n        >\r\n          Hover\r\n        </MenuButton>\r\n      </MenuNavbar>\r\n      <StyledMenu>\r\n        {isTextSection && (\r\n          <MenuSidebar>\r\n            <label for=\"text\">Text: </label>\r\n            <input\r\n              id=\"text\"\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              autoComplete=\"off\"\r\n              maxLength=\"50\"\r\n              onChange={onTextChange}\r\n              value={text}\r\n            />\r\n            <label for=\"fontSize\">Font size: </label>\r\n            <input\r\n              id=\"fontSize\"\r\n              type=\"number\"\r\n              placeholder=\"\"\r\n              autoComplete=\"off\"\r\n              min=\"0\"\r\n              max=\"64\"\r\n              onChange={onFontSizeChange}\r\n              value={btnFontSize}\r\n            />\r\n            <label for=\"textAlign\">Text justify: </label>\r\n            <select\r\n              id=\"textAlign\"\r\n              value={textAlign}\r\n              onChange={onTextAlignChange}\r\n            >\r\n              <option value=\"flex-start\">left</option>\r\n              <option value=\"center\">center</option>\r\n              <option value=\"flex-end\">right</option>\r\n            </select>\r\n            <form>\r\n              <label for=\"isURL\">Add URL</label>\r\n              <input\r\n                id=\"isURL\"\r\n                type=\"checkbox\"\r\n                checked={isURL}\r\n                onChange={onIsURLChange}\r\n              />\r\n            </form>\r\n            {isURL && (\r\n              <>\r\n                <label for=\"url\">Url: </label>\r\n                <input\r\n                  id=\"url\"\r\n                  type=\"text\"\r\n                  placeholder=\"https://\"\r\n                  autoComplete=\"off\"\r\n                  maxLength=\"100\"\r\n                  onChange={onUrlChange}\r\n                  value={url}\r\n                />\r\n              </>\r\n            )}\r\n          </MenuSidebar>\r\n        )}\r\n\r\n        {isSizeSection && (\r\n          <MenuSidebar>\r\n            <label for=\"width\">Width: </label>\r\n            <input\r\n              id=\"width\"\r\n              type=\"number\"\r\n              placeholder=\"\"\r\n              autoComplete=\"off\"\r\n              min=\"0\"\r\n              max=\"1200\"\r\n              onChange={onWidthChange}\r\n              value={btnWidth}\r\n            />\r\n            <label for=\"height\">Height: </label>\r\n            <input\r\n              id=\"height\"\r\n              type=\"number\"\r\n              placeholder=\"\"\r\n              autoComplete=\"off\"\r\n              min=\"0\"\r\n              max=\"450\"\r\n              onChange={onHeightChange}\r\n              value={btnHeight}\r\n            />\r\n            <label for=\"padding\">Padding: </label>\r\n            <input\r\n              id=\"padding\"\r\n              type=\"number\"\r\n              placeholder=\"\"\r\n              autoComplete=\"off\"\r\n              min=\"0\"\r\n              max=\"500\"\r\n              onChange={(e) => {\r\n                setBtnPadding(e.target.value);\r\n              }}\r\n              value={btnPadding}\r\n            />\r\n            <label for=\"margin\">Margin: </label>\r\n            <input\r\n              id=\"margin\"\r\n              type=\"number\"\r\n              placeholder=\"\"\r\n              autoComplete=\"off\"\r\n              min=\"0\"\r\n              max=\"500\"\r\n              onChange={(e) => {\r\n                setBtnMargin(e.target.value);\r\n              }}\r\n              value={btnMargin}\r\n            />\r\n            <label for=\"border-radius\">Border radius: </label>\r\n            <input\r\n              id=\"border-radius\"\r\n              type=\"number\"\r\n              placeholder=\"\"\r\n              autoComplete=\"off\"\r\n              min=\"0\"\r\n              max=\"180\"\r\n              onChange={(e) => {\r\n                setBorderRadius(e.target.value);\r\n              }}\r\n              value={borderRadius}\r\n            />\r\n          </MenuSidebar>\r\n        )}\r\n        {isColorSection && (\r\n          <MenuSidebar>\r\n            <PickerButton\r\n              onClick={() => {\r\n                setShowFontColorPicker(!showFontColorPicker);\r\n              }}\r\n            >\r\n              Font color\r\n            </PickerButton>\r\n            {showFontColorPicker && (\r\n              <PickerContainer>\r\n                <ChromePicker\r\n                  color={fontColor}\r\n                  onChange={(updatedColor) => setFontColor(updatedColor.hex)}\r\n                ></ChromePicker>\r\n              </PickerContainer>\r\n            )}\r\n            <PickerButton\r\n              onClick={() => {\r\n                setShowBgPicker(!showBgPicker);\r\n              }}\r\n            >\r\n              Background color\r\n            </PickerButton>\r\n            {showBgPicker && (\r\n              <PickerContainer>\r\n                <ChromePicker\r\n                  color={bgColor}\r\n                  onChange={(updatedColor) => setBgColor(updatedColor.hex)}\r\n                ></ChromePicker>\r\n              </PickerContainer>\r\n            )}\r\n          </MenuSidebar>\r\n        )}\r\n        {isBorderSection && (\r\n          <MenuSidebar>\r\n            <form>\r\n              <label for=\"isBorder\">Enable border</label>\r\n              <input\r\n                id=\"isBorder\"\r\n                type=\"checkbox\"\r\n                checked={isBorder}\r\n                onChange={onIsBorderChange}\r\n              />\r\n            </form>\r\n            {isBorder && (\r\n              <>\r\n                <label for=\"border-size\">Border size: </label>\r\n                <input\r\n                  id=\"border-size\"\r\n                  type=\"number\"\r\n                  placeholder=\"\"\r\n                  autoComplete=\"off\"\r\n                  min=\"0\"\r\n                  max=\"100\"\r\n                  onChange={onBorderSizeChange}\r\n                  value={borderSize}\r\n                />\r\n                <label for=\"borderStyle\">Border style: </label>\r\n                <select\r\n                  id=\"borderStyle\"\r\n                  value={borderStyle}\r\n                  onChange={onBorderStyleChange}\r\n                >\r\n                  <option value=\"solid\">solid</option>\r\n                  <option value=\"dotted\">dotted</option>\r\n                  <option value=\"dashed\">dashed</option>\r\n                  <option value=\"double\">double</option>\r\n                </select>\r\n                <PickerButton\r\n                  onClick={() => {\r\n                    setShowBorderPicker(!showBorderPicker);\r\n                  }}\r\n                >\r\n                  Border color\r\n                </PickerButton>\r\n                {showBorderPicker && (\r\n                  <PickerContainer>\r\n                    <ChromePicker\r\n                      color={borderColor}\r\n                      onChange={(updatedColor) =>\r\n                        setBorderColor(updatedColor.hex)\r\n                      }\r\n                    ></ChromePicker>\r\n                  </PickerContainer>\r\n                )}\r\n              </>\r\n            )}\r\n          </MenuSidebar>\r\n        )}\r\n        {isHoverSection && (\r\n          <MenuSidebar>\r\n            <form>\r\n              <label for=\"isHover\">Enable hover effect</label>\r\n              <input\r\n                id=\"isHover\"\r\n                type=\"checkbox\"\r\n                checked={isHover}\r\n                onChange={onIsHoverChange}\r\n              />\r\n            </form>\r\n            {isHover && (\r\n              <>\r\n                <PickerButton\r\n                  onClick={() => {\r\n                    setShowHoverColor(!showHoverColor);\r\n                  }}\r\n                >\r\n                  Hover font color\r\n                </PickerButton>\r\n                {showHoverColor && (\r\n                  <PickerContainer>\r\n                    <ChromePicker\r\n                      color={hoverColor}\r\n                      onChange={(updatedColor) =>\r\n                        setHoverColor(updatedColor.hex)\r\n                      }\r\n                    ></ChromePicker>\r\n                  </PickerContainer>\r\n                )}\r\n                <PickerButton\r\n                  onClick={() => {\r\n                    setShowHoverBgColor(!showHoverBgColor);\r\n                  }}\r\n                >\r\n                  Hover background color\r\n                </PickerButton>\r\n                {showHoverBgColor && (\r\n                  <PickerContainer>\r\n                    <ChromePicker\r\n                      color={hoverBgColor}\r\n                      onChange={(updatedColor) =>\r\n                        setHoverBgColor(updatedColor.hex)\r\n                      }\r\n                    ></ChromePicker>\r\n                  </PickerContainer>\r\n                )}\r\n                {isBorder && (\r\n                  <>\r\n                  <PickerButton\r\n                  onClick={() => {\r\n                    setShowHoverBorderColor(!showHoverBorderColor);\r\n                  }}\r\n                >\r\n                  Hover border color\r\n                </PickerButton>\r\n                {showHoverBorderColor && (\r\n                  <PickerContainer>\r\n                    <ChromePicker\r\n                      color={hoverBorderColor}\r\n                      onChange={(updatedColor) =>\r\n                        setHoverBorderColor(updatedColor.hex)\r\n                      }\r\n                    ></ChromePicker>\r\n                  </PickerContainer>\r\n                )}\r\n                </>\r\n                )}\r\n                \r\n                <label for=\"transitionTime\">Transition time: </label>\r\n                <input\r\n                  id=\"transitionTime\"\r\n                  type=\"number\"\r\n                  placeholder=\"in miliseconds\"\r\n                  autoComplete=\"off\"\r\n                  min=\"0\"\r\n                  max=\"5000\"\r\n                  onChange={onTransitionTimeChange}\r\n                  value={transitionTime}\r\n                />\r\n              </>\r\n            )}\r\n          </MenuSidebar>\r\n        )}\r\n      </StyledMenu>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledButton = styled.a`\r\n  background-color: ${props => props.bgColor};\r\n  display: flex;\r\n  justify-content: ${props => props.textAlign};\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  cursor: pointer;\r\n  width: ${props => props.btnWidth}px;\r\n  height: ${props => props.btnHeight}px;\r\n  border: ${props => props.borderSize}px ${props => props.borderStyle} ${props => props.borderColor};\r\n  border-radius: ${props => props.borderRadius}px;\r\n  font-size: ${props => props.btnFontSize}px;\r\n  color: ${props => props.fontColor};\r\n  text-decoration: none;\r\n  padding: ${props => props.btnPadding}px;\r\n  margin: ${props => props.btnMargin}px;\r\n  font-weight: ${props => props.fontWeigth};\r\n  transition: all ${prop=>prop.transitionTime}ms ease-in-out;\r\n\r\n  &:hover {\r\n    color: ${props => props.hoverColor};\r\n    background-color: ${props => props.hoverBgColor};\r\n    border: ${props => props.borderSize}px ${props => props.borderStyle} ${props => props.hoverBorderColor};\r\n  }\r\n`;\r\n\r\nexport default function Button(props) {\r\n\r\n  const {\r\n    text,\r\n    btnFontSize,\r\n    btnHeight,\r\n    btnWidth,\r\n    bgColor,\r\n    borderSize,\r\n    borderStyle,\r\n    borderColor,\r\n    fontColor,\r\n    borderRadius,\r\n    hoverColor,\r\n    hoverBgColor,\r\n    hoverBorderColor,\r\n    url,\r\n    btnMargin,\r\n    btnPadding,\r\n    textAlign,\r\n    transitionTime,\r\n    isURL,\r\n    isHover\r\n  } = props;\r\n  return (\r\n    <StyledButton\r\n      btnFontSize={btnFontSize}\r\n      fontColor={fontColor}\r\n      btnWidth={btnWidth}\r\n      btnHeight={btnHeight}\r\n      bgColor={bgColor}\r\n      borderSize={borderSize}\r\n      borderStyle={borderStyle}\r\n      borderColor={borderColor}\r\n      borderRadius={borderRadius}\r\n\r\n      hoverColor={isHover ? hoverColor : ''}\r\n      hoverBgColor={isHover ? hoverBgColor : ''}\r\n      hoverBorderColor={isHover ? hoverBorderColor : ''}\r\n\r\n      href={isURL ? 'https://'+url : url} \r\n      btnMargin={btnMargin}\r\n      btnPadding={btnPadding}\r\n      textAlign={textAlign}\r\n      transitionTime={transitionTime}\r\n      onClick={isURL ?  '' : (e)=>{e.preventDefault()}}\r\n      target=\"_blank\"\r\n    >\r\n      {text}\r\n    </StyledButton>\r\n  );\r\n}\r\n","import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nconst StyledClipboard = styled.div`\r\n  height: 200px;\r\n  width: 800px;\r\n  background-color: aliceblue;\r\n  border: 1px solid lightblue;\r\n  margin-top: 10px;\r\n  color: black;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  font-size: 13px;\r\n`;\r\n\r\nconst ClipboardMsg = styled.div`\r\nbackground-color: orange;\r\nmargin: 5px;\r\npadding: 5px;\r\nfont-size: 12px;\r\n`\r\n\r\nconst ClipboardSwitch = styled.div`\r\nwidth: 100%;\r\ndisplay: flex;\r\n`\r\n\r\nconst ClipboardSwitchBtn = styled.div`\r\nbackground-color: lightblue;\r\npadding: 5px;\r\ncursor: pointer;\r\n\r\n&:hover {\r\n  background-color: orange;\r\n}\r\n`\r\n\r\nconst ClipboardSection = styled.div`\r\n  margin: 10px;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  h4 {\r\n    margin: 1px;\r\n  }\r\n`;\r\n\r\nconst CopyButton = styled.div`\r\n  height: 26px;\r\n  width: 90%;\r\n  background-color: lightblue;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 5px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: orange;\r\n  }\r\n`;\r\n\r\nconst ClipboardText = styled.div`\r\n  margin: 5px;\r\n  text-align: center;\r\n  background-color: white;\r\n  border: 1px solid lightblue;\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nexport default function Clipboard(props) {\r\n  const [isCSS, setIsCSS] = useState(false)\r\n  const [isHTML, setIsHTML] = useState(true)\r\n  const [isCopied, setIsCopied] = useState(false)\r\n\r\n  const onCopyText = () => {\r\n    setIsCopied(true);\r\n    setTimeout(() => {\r\n      setIsCopied(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const {\r\n    text,\r\n    btnFontSize,\r\n    btnHeight,\r\n    btnWidth,\r\n    bgColor,\r\n    borderSize,\r\n    borderStyle,\r\n    borderColor,\r\n    fontColor,\r\n    borderRadius,\r\n    hoverColor,\r\n    hoverBgColor,\r\n    hoverBorderColor,\r\n    url,\r\n    btnMargin,\r\n    btnPadding,\r\n    textAlign,\r\n    transitionTime,\r\n    isURL,\r\n    isHover,\r\n    isBorder,\r\n  } = props;\r\n  const clipboardTextHTMLPlain = `<a class=\"btn\" ${\r\n    isURL ? `href='https://${url}'` : \"\"\r\n  }>${text}</a>`;\r\n  const clipboardButtonCSS = `\r\n    .btn {\r\n        display: flex;\r\n        justify-content: ${textAlign};\r\n        align-items: center;\r\n        font-size: ${btnFontSize}px;\r\n        height: ${btnHeight}px;\r\n        width: ${btnWidth}px;\r\n        background-color: ${bgColor};\r\n        ${\r\n          isBorder\r\n            ? `border: ${borderSize}px ${borderStyle} ${borderColor};`\r\n            : \"\"\r\n        }\r\n        \r\n        color: ${fontColor};\r\n        border-radius: ${borderRadius}px;\r\n        cursor: pointer;\r\n        text-decoration: none;\r\n        padding: ${btnPadding}px;\r\n        margin: ${btnMargin}px;\r\n        transition: all ${transitionTime}ms ease-in-out;\r\n    }\r\n    `;\r\n  const clipboardHoverCss = `\r\n    .btn:hover {\r\n    color: ${hoverColor};\r\n    background-color:${hoverBgColor};\r\n    border: ${borderSize}px ${borderStyle} ${hoverBorderColor};\r\n  }\r\n  `;\r\n\r\n  const clipboardAll = clipboardButtonCSS + clipboardHoverCss;\r\n\r\n  return (\r\n    <>\r\n    \r\n    <StyledClipboard>\r\n      <ClipboardSwitch>\r\n        <ClipboardSwitchBtn onClick={()=>{\r\n          setIsHTML(true)\r\n          setIsCSS(false)}}>\r\n            HTML\r\n        </ClipboardSwitchBtn>\r\n        <ClipboardSwitchBtn onClick={()=>{\r\n          setIsHTML(false)\r\n          setIsCSS(true)}}>\r\n          CSS\r\n        </ClipboardSwitchBtn>\r\n      </ClipboardSwitch>\r\n      {isHTML && (\r\n        <ClipboardSection>\r\n        <h4>\r\n          Copy code below and paste it into body section in your html file\r\n        </h4>\r\n        <ClipboardText>{clipboardTextHTMLPlain}</ClipboardText>\r\n        <CopyToClipboard onCopy={onCopyText} text={clipboardTextHTMLPlain}>\r\n          <CopyButton>Copy HTML</CopyButton>\r\n        </CopyToClipboard>\r\n      </ClipboardSection>\r\n      )}\r\n      {isCSS && (\r\n        <ClipboardSection>\r\n        <h4>Copy code below and paste it into your css file</h4>\r\n        <ClipboardText>\r\n          {clipboardButtonCSS}\r\n          {isHover && clipboardHoverCss}\r\n        </ClipboardText>\r\n        <CopyToClipboard onCopy={onCopyText} text={isHover ? clipboardAll : clipboardButtonCSS}>\r\n          <CopyButton>Copy CSS</CopyButton>\r\n        </CopyToClipboard>\r\n      </ClipboardSection>\r\n      )}\r\n      \r\n    </StyledClipboard>\r\n    {isCopied && \r\n    <ClipboardMsg>Copied!</ClipboardMsg>}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Menu from \"./Menu\";\nimport Button from \"./Button\";\nimport Clipboard from \"./Clipboard\";\n\nconst StyledApp = styled.div`\n  display: flex;\n`;\n\nconst AppTitle = styled.div`\nposition: absolute;\nright: 0;\ntop: 0;\npadding: 5px;\nz-index: 3;\nfont-size: 17px;\nfont-weight: 700;\n`\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  height: fit-content;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 99.99%;\n  min-height: 600px;\n  border-left: 1px solid lightblue;\n  border-bottom: 1px solid lightblue;\n`;\n\nfunction App() {\n  const [isURL, setIsURL] = useState(false)\n  const [isHover, setIsHover] = useState(false)\n  const [isBorder, setIsBorder] = useState(false)\n\n  const [text, setText] = useState(\"sample button\");\n  const [btnFontSize, setBtnFontSize] = useState(\"18\");\n  const [fontColor, setFontColor] = useState(\"black\");\n  const [textAlign, setTextAlign] = useState(\"center\")\n  const [url, setUrl] = useState(\"\");\n\n  const [btnWidth, setWidthChange] = useState(\"200\");\n  const [btnHeight, setHeightChange] = useState(\"100\");\n  const [btnPadding, setBtnPadding] = useState(\"0\")\n  const [btnMargin, setBtnMargin] = useState(\"0\")\n  const [bgColor, setBgColor] = useState(\"#BBB\");\n\n  const [borderSize, setBorderSize] = useState(\"0\");\n  const [borderStyle, setBorderStyle] = useState(\"solid\");\n  const [borderColor, setBorderColor] = useState(\"\");\n  const [borderRadius, setBorderRadius] = useState(\"0\");\n  \n  const [hoverColor, setHoverColor] = useState(\"\");\n  const [hoverBgColor, setHoverBgColor] = useState(\"\");\n  const [hoverBorderColor, setHoverBorderColor] = useState(\"\");\n\n  const [transitionTime, setTransitionTime] = useState(\"1\")\n  \n\n\n  const onTextChange = (e) => {\n    setText(e.target.value);\n  };\n  \n  const onUrlChange = (e) => {\n    setUrl(e.target.value);\n  };\n\n  const onTextAlignChange = (e) => {\n    setTextAlign(e.target.value);\n  };\n\n  const onFontSizeChange = (e) => {\n    setBtnFontSize(e.target.value);\n  };\n\n  const onHeightChange = (e) => {\n    setHeightChange(e.target.value);\n  };\n\n  const onWidthChange = (e) => {\n    setWidthChange(e.target.value);\n  };\n\n  const onBorderSizeChange = (e) => {\n    setBorderSize(e.target.value);\n  };\n\n  const onBorderStyleChange = (e) => {\n    setBorderStyle(e.target.value);\n  };\n\n  const onTransitionTimeChange = (e) => {\n    setTransitionTime(e.target.value)\n  }\n\n  const onIsURLChange = () => {\n    setIsURL(!isURL)\n  }\n\n  const onIsHoverChange = () => {\n    setIsHover(!isHover)\n  }\n\n  const onIsBorderChange = () => {\n    setIsBorder(!isBorder)\n  }\n\n\n  return (\n    <>\n    <AppTitle>Create your own button!</AppTitle>\n    <StyledApp>\n      <Menu\n        text={text}\n        onTextChange={onTextChange}\n        btnFontSize={btnFontSize}\n        onFontSizeChange={onFontSizeChange}\n        btnHeight={btnHeight}\n        onHeightChange={onHeightChange}\n        btnWidth={btnWidth}\n        onWidthChange={onWidthChange}\n        setBgColor={setBgColor}\n        bgColor={bgColor}\n        borderSize={borderSize}\n        onBorderSizeChange={onBorderSizeChange}\n        borderStyle={borderStyle}\n        onBorderStyleChange={onBorderStyleChange}\n        borderColor={borderColor}\n        setBorderColor={setBorderColor}\n        fontColor={fontColor}\n        setFontColor={setFontColor}\n        borderRadius={borderRadius}\n        setBorderRadius={setBorderRadius}\n        hoverColor={hoverColor}\n        setHoverColor={setHoverColor}\n        hoverBgColor={hoverBgColor}\n        setHoverBgColor={setHoverBgColor}\n        hoverBorderColor={hoverBorderColor}\n        setHoverBorderColor={setHoverBorderColor}\n        url={url}\n        onUrlChange={onUrlChange}\n        btnMargin={btnMargin}\n        setBtnMargin={setBtnMargin}\n        btnPadding={btnPadding}\n        setBtnPadding={setBtnPadding}\n        textAlign={textAlign}\n        onTextAlignChange={onTextAlignChange}\n        transitionTime={transitionTime}\n        onTransitionTimeChange={onTransitionTimeChange}\n        isURL={isURL}\n        onIsURLChange={onIsURLChange}\n        isHover={isHover}\n        onIsHoverChange={onIsHoverChange}\n        isBorder={isBorder}\n        onIsBorderChange={onIsBorderChange}\n      />\n      <AppContainer>\n        <ButtonContainer>\n          <Button\n            text={text}\n            btnFontSize={btnFontSize}\n            btnHeight={btnHeight}\n            btnWidth={btnWidth}\n            bgColor={bgColor}\n            borderSize={borderSize}\n            borderStyle={borderStyle}\n            borderColor={borderColor}\n            fontColor={fontColor}\n            borderRadius={borderRadius}\n            hoverColor={hoverColor}\n            hoverBgColor={hoverBgColor}\n            hoverBorderColor={hoverBorderColor}\n            url={url}\n            btnMargin={btnMargin}\n            btnPadding={btnPadding}\n            textAlign={textAlign}\n            transitionTime={transitionTime}\n            isURL={isURL}\n            isHover={isHover}\n            isBorder={isBorder}\n\n          />\n        </ButtonContainer>\n        <Clipboard\n          text={text}\n          btnFontSize={btnFontSize}\n          btnHeight={btnHeight}\n          btnWidth={btnWidth}\n          bgColor={bgColor}\n          borderSize={borderSize}\n          borderStyle={borderStyle}\n          borderColor={borderColor}\n          fontColor={fontColor}\n          borderRadius={borderRadius}\n          hoverColor={hoverColor}\n          hoverBgColor={hoverBgColor}\n          hoverBorderColor={hoverBorderColor}\n          url={url}\n          btnMargin={btnMargin}\n          btnPadding={btnPadding}\n          textAlign={textAlign}\n          transitionTime={transitionTime}\n          isURL={isURL}\n          isHover={isHover}\n          isBorder={isBorder}\n        />\n      </AppContainer>\n    </StyledApp>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}